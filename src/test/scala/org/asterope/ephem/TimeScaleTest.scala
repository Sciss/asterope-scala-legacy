package org.asterope.ephem

import org.asterope.util.ScalaTestCase

class TimeScaleTest extends ScalaTestCase{

  def testTimeScale {
    //TODO put value assertions here
    System.out.println("TimeScale Test")
    System.out.println(TimeOps.dstOffset + "-" + TimeOps.tzOffset)
    var astro: AstroDate = new AstroDate(2006, AstroDate.JANUARY, 1, 0, 0, 0)
    var time: TimeElement = new TimeElement(astro.toGCalendar, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    val observer: ObserverElement = ObserverElement.MADRID
    val eph: EphemerisElement = new EphemerisElement
    TimeScale.getTTminusUT1(new TimeElement(new AstroDate(2009, AstroDate.DECEMBER, 1), TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME), observer)
    System.out.println(TimeScale.TTminusUT1)
    System.out.println("Using TT as input")
    var JD: Double = TimeScale.getJD(time, observer, eph, TimeElement.Scale.LOCAL_TIME)
    System.out.println("JD  LT: " + JD)
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UT1)
    System.out.println("JD UT1: " + JD)
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UTC)
    System.out.println("JD UTC: " + JD)
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.TERRESTRIAL_TIME)
    System.out.println("JD  TT: " + JD)
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    System.out.println("JD TDB: " + JD)
    System.out.println("Using TDB as input")
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    astro = new AstroDate(JD)
    var time2: TimeElement = new TimeElement(astro.toGCalendar, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.LOCAL_TIME)
    System.out.println("JD  LT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UT1)
    System.out.println("JD UT1: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UTC)
    System.out.println("JD UTC: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.TERRESTRIAL_TIME)
    System.out.println("JD  TT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    System.out.println("JD TDB: " + JD)
    System.out.println("Using LT as input")
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.LOCAL_TIME)
    astro = new AstroDate(JD)
    time2 = new TimeElement(astro.toGCalendar, TimeElement.Scale.LOCAL_TIME)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.LOCAL_TIME)
    System.out.println("JD  LT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UT1)
    System.out.println("JD UT1: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UTC)
    System.out.println("JD UTC: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.TERRESTRIAL_TIME)
    System.out.println("JD  TT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    System.out.println("JD TDB: " + JD)
    System.out.println("Using UT1 as input")
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UT1)
    astro = new AstroDate(JD)
    time2 = new TimeElement(astro.toGCalendar, TimeElement.Scale.UNIVERSAL_TIME_UT1)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.LOCAL_TIME)
    System.out.println("JD  LT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UT1)
    System.out.println("JD UT1: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UTC)
    System.out.println("JD UTC: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.TERRESTRIAL_TIME)
    System.out.println("JD  TT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    System.out.println("JD TDB: " + JD)
    System.out.println("Using UTC as input")
    JD = TimeScale.getJD(time, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UTC)
    astro = new AstroDate(JD)
    time2 = new TimeElement(astro.toGCalendar, TimeElement.Scale.UNIVERSAL_TIME_UTC)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.LOCAL_TIME)
    System.out.println("JD  LT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UT1)
    System.out.println("JD UT1: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.UNIVERSAL_TIME_UTC)
    System.out.println("JD UTC: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.TERRESTRIAL_TIME)
    System.out.println("JD  TT: " + JD)
    JD = TimeScale.getJD(time2, observer, eph, TimeElement.Scale.BARYCENTRIC_DYNAMICAL_TIME)
    System.out.println("JD TDB: " + JD)
    System.out.println("TABLE dT (s) as year")

    for(yr <- 1990 until 2000){
      astro = new AstroDate(yr, 1, 1)
      time = new TimeElement(astro.jd, TimeElement.Scale.TERRESTRIAL_TIME)
      TimeScale.getTTminusUT1(time, observer)
      System.out.println(yr + "  " + TimeScale.TTminusUT1)
    }


  }
}
