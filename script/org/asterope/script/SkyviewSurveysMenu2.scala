package org.asterope.script


import java.io.InputStream
import java.util.LinkedHashMap
import java.util.TreeSet
import java.util.Set
import java.util.Map
import collection.JavaConversions._
import io.Source
import skyview.survey._

/**
 * various utilities related to skyview
 */
object SkyviewSurveysMenu2 {
  val REGIMES: Array[String] = Array("Radio", "Infrared", "Optical", "Ultraviolet", "X-ray", "Gamma Ray")

  /**find available surveys, key is name of regime, value is set of survey names */
  def findSurveys: Map[String, Set[SkyviewSurvey]] = {
    val ret: Map[String, Set[SkyviewSurvey]] = new LinkedHashMap[String, Set[SkyviewSurvey]]
    for (reg <- REGIMES) ret.put(reg, new TreeSet[SkyviewSurvey])
    
    for (name <- XMLSurveyFinder.surveys) {
      val file: String = XMLSurveyFinder.findSurveyFile(name)
      
      
      
      val surveyDesc = org.asterope.skyview.XmlSurvey.loadXmlFile(file)
      val f: SkyviewSurvey = new SkyviewSurvey(name, file,surveyDesc.name)
      val regime = surveyDesc.metaTable("Regime")
      if (!ret.contains(regime)) ret.put(regime, new TreeSet[SkyviewSurvey])

      ret.get(regime).add(f)
    }
    return ret
  }


  /**
   * Generates stuff we want
   * @throws IOException
   */
  def main(args: Array[String]): Unit = {
    System.out.println("//generated by "+getClass.getName)
    val ss: Map[String, Set[SkyviewSurvey]] = findSurveys
    for (regime <- ss.keySet) {
      
      System.out.print("\"" + regime + "\" ->List(")
      for (surv <- ss.get(regime)) {
        if (!"".equals(surv.id)) System.out.print("(\"" + surv.id + "\",\"" + surv.file + "\",\"" + surv.name + "\"), ")
      }
      System.out.println("),")
    }
  }


  /**
   * Identifies skyview survey
   */
  case class SkyviewSurvey(id:String,file:String,name:String) extends Ordered[SkyviewSurvey]{
    def compare(that: SkyviewSurvey): Int = name.compare(that.name)
  }

}
