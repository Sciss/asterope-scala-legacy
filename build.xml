<?xml version="1.0" encoding="UTF-8"?>
<project name="asterope" basedir=".">

    <description>
        Asterope astronomical program
    </description>

    <property file="build.properties"/>
    <property name="build" value="build"/>
    <property name="bin" value="${build}/bin"/>
    <property name="doc" value="${build}/doc"/>
    <property name="testBin" value="${build}/test"/>
    <property name="testReport" value="${build}/testReport"/>
    <property name="binArchive" value="${build}/asterope-${version}-bin.zip"/>
    <property name="srcArchive" value="${build}/asterope-${version}-src.zip"/>
    <property name="jarArchive" value="${build}/lib/asterope-${version}.jar"/>
    <tstamp/>


    <!-- define classpath -->
    <path id="classpath">
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="tools/buildlib">
            <include name="junit*.jar"/>
        </fileset>
    </path>

    <!-- custom tasks -->
    <taskdef resource="scala/tools/ant/antlib.xml" classpathref="classpath"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml"  classpathref="classpath"/>


    <!-- clean directories -->
    <target name="clean" description="clean everything compiled">
        <delete dir="${build}"/>
    </target>

    <!-- clean created database -->
    <target name="cleandb" description="clean created database">
        <delete dir="profile/db"/>
    </target>

    <!-- compile production classes -->
    <target name="compile" description="compile the source">
        <mkdir dir="${bin}"/>
		
        <!-- compile Scala and java stuff -->
        <scalac srcdir="src" destdir="${bin}" failonerror="true">
            <classpath>
                <path refid="classpath"/>
				<path location="${bin}/"/>
            </classpath>

        </scalac>
        <javac srcdir="src" destdir="${bin}" failonerror="true" classpathref="classpath"
               source="1.6" target="1.6" debug="true">
            <classpath>
                <path refid="classpath"/>
                <path location="${bin}/"/><!-- already compiled scala classes -->
            </classpath>

        </javac>

        <copy todir="${bin}">
            <fileset dir="src" includes="**/*"/>
        </copy>
    </target>
 
    <target name="doc" description="compile Scala documentation"
            depends="compile">
        <mkdir dir="${doc}"/>

        <!-- compile Scala and java stuff -->
        <scaladoc srcdir="src" destdir="${doc}" deprecation="yes" unchecked="yes"  doctitle="Asterope">
            <include name="org/asterope/**/*.scala"   />
            <include name="org/asterope/**/*.java"   />

            <classpath>
                <path refid="classpath"/>
				<path location="${bin}/"/>
            </classpath>

        </scaladoc>
    </target>


    <target name="compiledb" description="import data into database" depends="compile">    	
        <java classname="org.asterope.data.CompileDb" failonerror="true" maxmemory="512m" fork="true">
            <classpath>
                <path refid="classpath"/>
                <path location="${bin}/"/>
            </classpath>
        </java>

    </target>


    <!-- compile test classes -->
    <target name="compile-test" description="compile tests" depends="compile">
        <mkdir dir="${testBin}"/>

        <scalac srcdir="test" destdir="${testBin}" failonerror="true">
            <classpath>
                <path location="${bin}/"/>
                <path refid="classpath"/>
            </classpath>
        </scalac>

        <javac srcdir="test" destdir="${testBin}" failonerror="true"
               source="1.6" target="1.6" debug="true">
            <classpath>
                <path location="${testBin}/"/>
                <path location="${bin}/"/>
                <path refid="classpath"/>
            </classpath>
        </javac>

        <copy todir="${testBin}">
            <fileset dir="test" includes="**/*"/>
        </copy>
    </target>


    <target name="test" description="Runs already compiled unit tests"
            depends="compile-test, compiledb">
		<delete dir="${testReport}"/>
        <mkdir dir="${testReport}"/>

        <junit printsummary="yes" haltonfailure="no" showoutput="${testShowOutput}"
               failureproperty="unit.test.failure" fork="true" maxmemory="512M">
            <classpath>
                <pathelement location="${bin}"/>
                <pathelement location="${testBin}"/>
                <path refid="classpath"/>
            </classpath>

            <formatter type="xml"/>

            <batchtest todir="${testReport}">
                <fileset dir="src">
                    <include name="${testPattern}"/>
                </fileset>

                <fileset dir="${testBin}">
                    <include name="${testPattern}"/>
                </fileset>

            </batchtest>
        </junit>

        <junitreport todir="${testReport}">
            <fileset dir="${testReport}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${testReport}"/>
        </junitreport>

        <fail message="!!!        At least one unit test has FAILED      !!!" if="unit.test.failure"/>
    </target>




    <!-- starts GuiMain class of Asterope application
      Pass command line from -Dargs property:
      ant -Dargs="optional multiple arguments enclosed within double quotes"  -->

    <target name="main" description="starts asterope application" depends="compile">
        <java classname="org.asterope.gui.Main"
              failonerror="true" maxmemory="512m" fork="true">
            <classpath>
                <path refid="classpath"/>
                <path location="${bin}/"/>
            </classpath>
            <arg line="${args}"/>
        </java>
    </target>


	
	<target name="scaladoc" >
		<delete dir="build/scaladoc"/>
		<mkdir dir="build/scaladoc"/>
		<scaladoc destdir="build/scaladoc">
		    <classpath refid="classpath"/>
		    <src path="src"/>
		    <include name="**/*.java"/>
		    <include name="**/*.scala"/>
		</scaladoc>
	</target>

    <target name="jar" description="Create asterope.jar"
            depends="compile">
        <mkdir dir="${build}/lib"/>

        <jar destfile="${jarArchive}" basedir="${bin}">
            <manifest>
                <attribute name="Implementation-Title" value="Asterope"/>
                <attribute name="Version" value="${version}"/>
            </manifest>
        </jar>
    </target>

    <target name="dist" description="Build distribution files without rebuilding DB and unit tests"
           depends="test, compiledb, jar">
        <zip destfile="${srcArchive}">
            <fileset dir="." >
                <exclude name=".idea/" />
            	<exclude name=".scala_dependencies" />
                <exclude name="build/"/>
                <exclude name="out/"/>
                <exclude name="bin/"/>
				<exclude name="skycache/" />
                <exclude name="profile/" />
                <exclude name=".git/" />
				<exclude name="*.log" />
				<exclude name="*.png" />
                <exclude name="Asterope.iml" />
            </fileset>
            <!-- make ant executable on unix -->
            <zipfileset dir="." includes="ant.sh" filemode="0755"/>
        </zip>

        <zip destfile="${binArchive}">
            <!-- use little trick to project jar file into lib directory -->
            <fileset dir="${build}" includes="lib/"/>
            <fileset dir="." >
            	<include name="data/dsoutline/" />
                <include name="lib/" />
                <include name="profile/"/>
                <exclude name=".git/" />
                <exclude name="skycache/" />
            </fileset>
			<fileset dir="tools/bin" includes="*.bat"/>
            <!-- make asterope.sh executable on unix -->
            <zipfileset dir="tools/bin" includes="*.sh" filemode="0755"/>
        </zip>

    </target>

</project>
